{"version":3,"sources":["components/UI/Input/Input.jsx","components/UI/Input/Input.module.scss","components/Order/CheckoutSummary/CheckoutSummary.module.scss","containers/Checkout/ContactData/ContactData.module.scss","components/Order/CheckoutSummary/CheckoutSummary.jsx","containers/Checkout/ContactData/ContactData.jsx","containers/Checkout/Checkout.jsx"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_scss__WEBPACK_IMPORTED_MODULE_1__","_Input_module_scss__WEBPACK_IMPORTED_MODULE_1___default","Input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","validationError","ErrorMessage","Label","label","module","exports","CheckoutSummary","ContactData","_ref","ingredients","checkoutCancelled","checkoutContinued","react_default","style","width","margin","Burger","Button","clicked","btnType","state","orderForm","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","country","email","isEmail","deliveryMethod","isFormValid","orderHandler","event","preventDefault","formData","formElementIdentifier","_this","order","price","totalPrice","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","myEventTargetValue","target","inputIdentifiers","checkValidity","setState","prevState","updateObject","defineProperty","_this2","this","formElementsArray","id","config","form","onSubmit","formElement","e","disabled","loading","Spinner","Component","connect","burgerBuilder","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","react_router","to","process","purchased","Order_CheckoutSummary_CheckoutSummary","path","concat","match","component"],"mappings":"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","file":"static/js/3.758fe89d.chunk.js","sourcesContent":["import React from 'react'\r\nimport classes from './Input.module.scss';\r\n\r\nconst Input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />\r\n            break;\r\n        case ('select'):\r\n            inputElement =\r\n                <select\r\n                    className={inputClasses.join(' ')}\r\n                    value={props.value}\r\n                    onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            break;\r\n        default:\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />\r\n            break;\r\n    }\r\n\r\n    let validationError = props.invalid && props.touched ? <p className={classes.ErrorMessage}>Please enter a valid value!</p> : null;\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n            {validationError}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2MO3H\",\"ErrorMessage\":\"Input_ErrorMessage__1chsh\",\"Label\":\"Input_Label__2nJzn\",\"InputElement\":\"Input_InputElement__2FyhA\",\"Invalid\":\"Input_Invalid__Xx0wA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__1G4GW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__LQLBr\"};","import React from 'react'\r\nimport Burger from 'components/Burger/Burger'\r\nimport Button from 'components/UI/Button/Button'\r\nimport classes from './CheckoutSummary.module.scss'\r\n\r\nconst CheckoutSummary = ({ingredients, checkoutCancelled, checkoutContinued}) => {\r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1>We hope it tastes well!</h1>\r\n            <div style={{width: '100%', margin: 'auto'}}>\r\n                <Burger ingredients={ingredients}/>\r\n            </div>\r\n            <Button clicked={checkoutCancelled} btnType='Danger'>CANCEL</Button>\r\n            <Button clicked={checkoutContinued} btnType='Success'>CONTINUE</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CheckoutSummary\r\n","import React, { Component } from 'react'\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from '../../../store/actions/index';\r\n\r\nimport Spinner from 'components/UI/Spinner/Spinner'\r\nimport Button from 'components/UI/Button/Button'\r\nimport Input from 'components/UI/Input/Input'\r\nimport classes from './ContactData.module.scss'\r\nimport axios from '../../../axios-orders';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport { updateObject, checkValidity } from '../../../shared/utility';\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Postal Code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 5\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'email',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your E-mail'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        { value: 'fastest', displayValue: 'Fastest' },\r\n                        { value: 'cheapest', displayValue: 'Cheapest' }\r\n                    ]\r\n                },\r\n                value: 'fastest',\r\n                valid: true\r\n            }\r\n        },\r\n        isFormValid: false\r\n    }\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault();\r\n        const formData = {};\r\n        for (let formElementIdentifier in this.state.orderForm) {\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n\r\n        const order = {\r\n            ingredients: this.props.ingredients,\r\n            price: this.props.totalPrice,\r\n            orderData: formData,\r\n            userId: this.props.userId\r\n        }\r\n\r\n        this.props.onOrderBurger(order, this.props.token);\r\n\r\n    }\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        const myEventTargetValue = event.target.value;\r\n\r\n        let isFormValid = true;\r\n        const { orderForm } = this.state;\r\n\r\n        // checking validity of each field\r\n        for (let inputIdentifiers in orderForm) {\r\n            if (inputIdentifiers === inputIdentifier) {\r\n                isFormValid = checkValidity(myEventTargetValue, orderForm[inputIdentifiers].validation) && isFormValid;\r\n            } else {\r\n                isFormValid = checkValidity(orderForm[inputIdentifiers].value, orderForm[inputIdentifiers].validation) && isFormValid;\r\n            }\r\n        }\r\n\r\n        this.setState(prevState => ({\r\n            orderForm: updateObject(prevState.orderForm, {\r\n                [inputIdentifier]: updateObject(prevState.orderForm[inputIdentifier], {\r\n                    value: myEventTargetValue,\r\n                    valid: checkValidity(myEventTargetValue, prevState.orderForm[inputIdentifier].validation),\r\n                    touched: true,\r\n                })\r\n            }),\r\n            isFormValid: isFormValid\r\n        }))\r\n    }\r\n\r\n\r\n    render() {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            })\r\n        }\r\n        let form = (\r\n            <form onSubmit={this.orderHandler}>\r\n                {formElementsArray.map(formElement => (\r\n                    <Input\r\n                        key={formElement.id}\r\n                        elementType={formElement.config.elementType}\r\n                        elementConfig={formElement.config.elementConfig}\r\n                        value={formElement.config.value}\r\n                        invalid={!formElement.config.valid}\r\n                        shouldValidate={formElement.config.validation}\r\n                        touched={formElement.config.touched}\r\n                        changed={(e) => this.inputChangedHandler(e, formElement.id)} />\r\n                ))}\r\n                <Button btnType=\"Success\" disabled={!this.state.isFormValid}>ORDER</Button>\r\n            </form>\r\n        );\r\n\r\n        if (this.props.loading) {\r\n            form = <Spinner />;\r\n        }\r\n\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ingredients: state.burgerBuilder.ingredients,\r\n        totalPrice: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (orderData, token) => dispatch(actions.startPurchasingBurger(orderData, token))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));\r\n","import React, { Component } from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\n\r\nimport CheckoutSummary from 'components/Order/CheckoutSummary/CheckoutSummary'\r\nimport ContactData from './ContactData/ContactData'\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Checkout extends Component {\r\n\r\n    checkoutCancelledHandler = () => {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    checkoutContinuedHandler = () => {\r\n        this.props.history.replace('/checkout/contact-data');\r\n    }\r\n\r\n    render() {\r\n        let summary = <Redirect to={process.env.PUBLIC_URL + \"/\"} />\r\n        if (this.props.ingredients) {\r\n            const purchased = this.props.purchased ? <Redirect to={process.env.PUBLIC_URL + \"/\"} /> : null;\r\n            summary = (\r\n                <div>\r\n                    {purchased}\r\n                    <CheckoutSummary\r\n                        ingredients={this.props.ingredients}\r\n                        checkoutCancelled={this.checkoutCancelledHandler}\r\n                        checkoutContinued={this.checkoutContinuedHandler}\r\n                    />\r\n                    <Route\r\n                        path={`${this.props.match.path}/contact-data`}\r\n                        component={ContactData} />\r\n                </div>\r\n            )\r\n        }\r\n        return summary;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ingredients: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        purchased: state.order.purchased\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Checkout)\r\n"],"sourceRoot":""}